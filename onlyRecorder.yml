version: "3"
services:
  #------------------------------------------------------------------------------
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    #    ports:
    #    - "2181:2181"
    networks:
      bitnet:
        ipv4_address: ${ZOOKEEPER_IP_ADDRESS}

  #------------------------------------------------------------------------------
  kafka1:
    image: wurstmeister/kafka
    container_name: kafka1
    #    ports:
    #    - "9092:9092"
    environment:
      BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LOG_DIRS: /tmp/kafka-logs
      KAFKA_LISTENERS: PLAINTEXT://${KAFKA1_IP_ADDRESS}:${KAFKA1_PORT}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CREATE_TOPICS: ${TOPIC_MEMPOOL_TX_EVENTS}:1:1
      KAFKA_MESSAGE_MAX_BYTES: 4000000
    #fetch.message.max.bytes
    #replica.fetch.max.bytes
    #max.message.bytes
    #message.max.bytes

    networks:
      bitnet:
        ipv4_address: ${KAFKA1_IP_ADDRESS}
    volumes:
      - kafka_data_volume1:/tmp/kafka-logs
    #      - /var/run/docker.sock:/var/run/docker.sock # Esto no deberia ponerse,
    depends_on:
      - zookeeper

  #------------------------------------------------------------------------------
  configuration_server:
    image: ${REGISTRY_HOST}/configuration_server:latest
    container_name: configuration_server
    #    ports:
    #      - "8888:8888"
    environment:
      server.port: ${CONFIGURATION_SERVER_PORT}
    networks:
      bitnet:
        ipv4_address: ${CONFIGURATION_SERVER_IP_ADDRESS}
    volumes:
      - configuration_server_volume:/tmp

  #------------------------------------------------------------------------------
  admin_server:
    image: ${REGISTRY_HOST}/admin_server:latest
    container_name: admin_server
    #    ports:
    #      - "8888:8888"
    environment:
      server.port: ${ADMIN_SERVER_PORT}
      eureka.client.serviceUrl.defaultZone: http://${SERVICE_DISCOVERY_IP_ADDRESS}:${SERVICE_DISCOVERY_PORT}/eureka/
    networks:
      bitnet:
        ipv4_address: ${ADMIN_SERVER_IP_ADDRESS}
    volumes:
      - admin_server_volume:/tmp

  #------------------------------------------------------------------------------
  service_discovery:
    image: ${REGISTRY_HOST}/service_discovery:latest
    container_name: service_discovery
    #    ports:
    #      - "8761:8761"
    networks:
      bitnet:
        ipv4_address: ${SERVICE_DISCOVERY_IP_ADDRESS}
    volumes:
      - service_discovery_volume:/tmp

  #------------------------------------------------------------------------------
  mempool_recorder_mongo1:
    image: mongo:latest
    container_name: mempool_recorder_mongo1
    ##    ports:
    ##      - "27017:27017"
    networks:
      bitnet:
        ipv4_address: ${MEMPOOL_RECORDER_MONGO1_IP_ADDRESS}
    volumes:
      - mempool_recorder_mongo_volume1:/data/db

  #------------------------------------------------------------------------------
  bitcoind_adapter1:
    image: ${REGISTRY_HOST}/bitcoind_adapter:latest
    container_name: bitcoind_adapter1
    #    ports:
    #      - "8080:8080"
    #      - "8081:8081"
    environment:
      spring.profiles.active: "prod,mainNet"
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000"
      spring.cloud.config.enabled: "true"
      spring.cloud.config.fail-fast: "true"
      spring.cloud.config.uri: http://${CONFIGURATION_SERVER_IP_ADDRESS}:${CONFIGURATION_SERVER_PORT}
      eureka.client.serviceUrl.defaultZone: http://${SERVICE_DISCOVERY_IP_ADDRESS}:${SERVICE_DISCOVERY_PORT}/eureka/
      bitcoind.host: ${BITCOIND_HOST_IP_ADDRESS}
      bitcoind.zmqPort: ${BITCOIND_ZMQ_PORT}
      #bitcoind.rpcPort: ${BITCOIND_RPC_PORT}#Depends on Spring profile
      server.port: ${BITCOIND_1_ADAPTER_PORT}
      spring.cloud.stream.kafka.binder.zkNodes: ${ZOOKEEPER_IP_ADDRESS}
      spring.cloud.stream.kafka.binder.brokers: ${KAFKA1_IP_ADDRESS}
    networks:
      bitnet:
        ipv4_address: ${BITCOIND_1_ADAPTER_IP_ADDRESS}
    restart: always
    depends_on:
      - configuration_server
      - service_discovery
    volumes:
      - bitcoind_adapter1_volume:/tmp

  #------------------------------------------------------------------------------
  mempool_recorder1:
    image: ${REGISTRY_HOST}/mempool_recorder:latest
    container_name: mempool_recorder1
    environment:
      spring.profiles.active: "prod"
      JAVA_TOOL_OPTIONS: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000"
      spring.cloud.config.enabled: "true"
      spring.cloud.config.fail-fast: "true"
      spring_cloud_config_uri: http://${CONFIGURATION_SERVER_IP_ADDRESS}:${CONFIGURATION_SERVER_PORT}
      eureka.client.serviceUrl.defaultZone: http://${SERVICE_DISCOVERY_IP_ADDRESS}:${SERVICE_DISCOVERY_PORT}/eureka/
      spring.data.mongodb.uri: mongodb://${MEMPOOL_RECORDER_MONGO1_IP_ADDRESS}:${MEMPOOL_RECORDER_MONGO1_PORT}/stateOnBlock
      #logging.level.org.springframework.data.mongodb.core.MongoTemplate: DEBUG
      #logging.level.org.springframework.data.mongodb.core.ReactiveMongoTemplate: DEBUG
      management.server.port: ${MEMPOOL_RECORDER_MANAGEMENT_PORT}
      server.port: ${MEMPOOL_RECORDER_PORT}
      spring.cloud.stream.kafka.binder.zkNodes: ${ZOOKEEPER_IP_ADDRESS}
      spring.cloud.stream.kafka.binder.brokers: ${KAFKA1_IP_ADDRESS}
    networks:
      bitnet:
        ipv4_address: ${MEMPOOL_RECORDER_IP_ADDRESSS}
    restart: always
    depends_on:
      - mempool_recorder_mongo1
      - configuration_server
      - service_discovery
    #TODO: Maybe needed
    #      - bitcoind_adapter1
    volumes:
      - mempool_recorder1_volume:/tmp

  #------------------------------------------------------------------------------
  gateway_service:
    image: ${REGISTRY_HOST}/gateway_service:latest
    container_name: gateway_service
    networks:
      bitnet:
        ipv4_address: ${GATEWAY_SERVICE_IP_ADDRESS}
    restart: always
    #TODO: Maybe needed
    #    depends_on:
    #      - configuration_server
    #      - service_discovery
    #      - bitcoind_adapter1
    #      - tx_mempool1
    volumes:
      - gateway_service_volume:/tmp

#------------------------------------------------------------------------------
volumes:
  bitcoind_adapter1_volume:
  mempool_recorder1_volume:
  mempool_recorder_mongo_volume1:
  kafka_data_volume1:
  kafka_data_volume2:
  kafka_data_volume3:
  configuration_server_volume:
  admin_server_volume:
  service_discovery_volume:
  gateway_service_volume:

#------------------------------------------------------------------------------
networks:
  bitnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
#        - gateway: 172.18.0.1
